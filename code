#include<stm32f4xx.h>

/*SMART HOME AUTOMATION SYSTEM 
1:Relay Module Configuration
2:LCD Configuration
3:Automatic Mode 
4:UART4 Configuration for Manual mode with Python App
5:Hc05 Bluetooth Module Configuration for Voice Mode using Bluetooth Terminal in Mobile
*/

char mode[1];
int sec=40;
int min=59;
int hour=17;

//Relay
void configure(void)
{
	int pin = 0;
	// Initialize clock for Part C
	RCC ->AHB1ENR |= 0x04;
	
	for(pin=4;pin<=7;pin++)//PC4-PC7 as Output for Relay
	{
		GPIOC ->MODER &= ~(0x3 << (pin * 2));
		GPIOC ->MODER |= (0x1 << (pin * 2));
	}
}

void us(volatile int x)
{
	int i;
	for(i=0; i<(3*x); i++)
	{
		;
	}
}
// delay in micro second
void delay_us(volatile unsigned y)
{
  volatile unsigned int num;
  for (num = 0; num < y; num++)
  {}
	for (num = 0; num < y/2; num++)
  {}
}
// delay in milli second
void delay_ms(volatile unsigned a)
{
  volatile unsigned int num;
  for (num = 0; num < a; num++)
  {
    delay_us(1000);
  }
}

//LCD OUTPUT
void configure_LCD(void)
{
	int pin;
	RCC->AHB1ENR |=0x1; //enable clock for port A
	RCC->AHB1ENR |=0x10;     //enable clock for port E

	for( pin=0; pin<=7; pin++)
	{
		GPIOA->MODER &= (~(0x3<<(pin*2)));
		GPIOA->MODER |=(0x01<<(pin*2));      //making PA0 to PA7 as output
	}
	for( pin=1; pin<=3; pin++)
	{
		GPIOE->MODER &= (~(0x3<<(pin*2)));
		GPIOE->MODER |=(0x01<<(pin*2));      //making PE1 to PE3 as output for RS, R/W, and EN respectively
	}
}
void lcd_write_command(unsigned char cmd)
{
	GPIOE->ODR &= ~(0x2);  //PE1
	GPIOE->ODR &= ~(0x4);   //PE2
	GPIOE->ODR |= (0x8);  //PE3
	us(2);
	GPIOA->ODR &= ~(0xFF);
	GPIOA->ODR |= cmd;
	us(2);
	GPIOE->ODR &= ~(0x8);
	us(2);
}
void lcd_write_data(unsigned char cmd)
{
	GPIOE->ODR |=(0x2);  //PE1
	GPIOE->ODR &= ~(0x4);   //PE2
	GPIOE->ODR |= (0x8);  //PE3

	GPIOA->ODR &= ~(0xFF);
	GPIOA->ODR |= cmd;
	us(2);
	GPIOE->ODR &= ~(0x8);
	us(2);
}

void lcd_init()
{
	lcd_write_command(0x38); //pin row configuration
	lcd_write_command(0x0C); //clear all

	lcd_write_command(0x06);  //Cursor shift
	lcd_write_command(0x01);  //Return home

	lcd_write_command(0x80);  //Turn on Display
}


void lcd_clear(void)
{
	lcd_write_command(0x01);//clear disp
	delay_ms(2);
	lcd_write_command(0x02);//move cursor to home
	delay_ms(2);
}

void lcd_write_string(unsigned char *ptr)
{
	int j;
	for(j=0;ptr[j]!=0;j++)
	{
		delay_ms(2);
		lcd_write_data(ptr[j]);
		delay_ms(2);
	}
	if (strlen(ptr)<=16)
	{
		while(*ptr!=0)
		{
			lcd_write_data(*ptr);
			ptr++;
		}
	}
	else if (strlen(ptr)>16)
	{
		for (j=0;j<16;j++)
		{
			lcd_write_data(*ptr);
			ptr++;
		}
		lcd_write_command(0xC0);
		while(*ptr)
		{
			lcd_write_data(*ptr);
			ptr++;
		}
	}
}

void lcd_write_num(int print_val)
{
	int i=0,buff[20];
	int temp=print_val;

	if (print_val<0)
	{
		lcd_write_data('-');
		print_val*=(-1);
	}
	else if(print_val==0)
	{
		lcd_write_data(48);
	}
	else
	{
		for(i=0;print_val!=0;i++)
		{
			buff[i]=temp%10;
			print_val=print_val/10;
			temp=print_val;
		}
		for(;i!=0;--i)
		{
			lcd_write_data(buff[i-1]+48);
		}
	}
}

void Relay_Status(int choice)
{
	//Relay(1);Light 1
	//Relay(2);Light 2
	//Relay(3);Light 3
	//Relay(4);Light 4

	switch (choice)
	{
		case -1:
			break;
		case 0x01:
			lcd_write_string("Relay Num 1= OFF");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x02:
			lcd_write_string("Relay Num 2= OFF");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x04:
			lcd_write_string("Relay Num 3= OFF");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x08:
			lcd_write_string("Relay Num 4= OFF");
			delay_ms(1000);
			lcd_clear();
			break;
			case 0x10:
			lcd_write_string("Relay Num 1= ONN");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x20:
			lcd_write_string("Relay Num 2= ONN");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x40:
			lcd_write_string("Relay Num 3= ONN");
			delay_ms(1000);
			lcd_clear();
			break;
		case 0x80:
			lcd_write_string("Relay Num 4= ONN");
			delay_ms(1000);
			lcd_clear();
			break;
	}
}

void Relay_On(int choice)
{
	//Relay(1);Light 1
	//Relay(2);Light 2
	//Relay(3);Light 3
	//Relay(4);Light 4

	switch (choice)
	{
		case -1:
			break;
		case 1:
			GPIOC->ODR &= ~0x10; //PC4 = Relay 1
			Relay_Status(0x10);
			break;
		case 2:
			GPIOC->ODR &= ~0x20; //PC5 = Relay 2
			Relay_Status(0x20);
			break;
		case 3:
			GPIOC->ODR &= ~0x40; //PC6 = Relay 3
			Relay_Status(0x40);
			break;
		case 4:
			GPIOC->ODR &= ~0x80; //PC7 = Relay 4
			Relay_Status(0x80);
			break;
		default:{}
	}
}
void Relay_Off(int choice)
{
	//Relay(1);Light 1
	//Relay(2);Light 2
	//Relay(3);Light 3
	//Relay(4);Light 4

	switch (choice)
	{
		case -1:
			break;
		case 1:
			GPIOC->ODR |= 0x10; //PC4 = Relay 1
			Relay_Status(0x01);
			break;
		case 2:
			GPIOC->ODR |= 0x20; //PC5 = Relay 2
			Relay_Status(0x02);
			break;
		case 3:
			GPIOC->ODR |= 0x40; //PC6 = Relay 3
			Relay_Status(0x04);
			break;
		case 4:
			GPIOC->ODR |= 0x80; //PC7 = Relay 4
			Relay_Status(0x08);
			break;
		default:{}
	}
}



void CLOCK(void)
{
	if((sec&5)==0)
	{
		if((hour<=7)||(hour>=18))//Night Time
		{
			Relay_On(1);
			Relay_On(2);
			Relay_On(3);
		}
		else
		{
			Relay_Off(1);
			Relay_Off(2);
			Relay_Off(3);
		}
	}

}
void Intro(void)
{//Prints Intro Messsage
	unsigned char text1[] = {"---SMART HOME---"};
	unsigned char text2[] = {"Umar Sodager----"};
	int i;
	for (i=0; i<16; i++)
	{
		delay_ms(100);
		lcd_write_data(text1[i]);
	}
	delay_ms(100);
	lcd_write_command(0xC0);
	delay_ms(10);
	for (i=0; i<16; i++)
	{
		delay_ms(100);
		lcd_write_data(text2[i]);
	}
	lcd_write_command(0x0C);//Cursor OFF
	lcd_write_command(0x02);//Return Home
	delay_ms(200);
}
void LCD_OUT(void)
{
	int i;
	lcd_clear();
	lcd_write_string(" Hour:          ");
	delay_ms(1000);
	lcd_write_command(0xC0);
	lcd_write_string(" Mins:          ");
	delay_ms(1000);
	lcd_clear();
	for(i=0;i<60;i=i+59)
	{
		if (i==59)
		{
			lcd_write_num(hour+3);
			delay_ms(1000);
			//lcd_write_command(0xC0);
			lcd_write_num(min-(min-1));
			delay_ms(1000);
			lcd_clear();
			delay_ms(10);
		}
		else
		{
			lcd_write_num(hour);
			delay_ms(1000);
			lcd_write_command(0xC0);
			lcd_write_num(min);
			delay_ms(1000);
			lcd_clear();
			delay_ms(1000);
		}
		lcd_write_command(0x80);
		delay_ms(10);
	}
	hour=hour+1;
	min=1;
	for(hour=hour+1;hour>=6;hour=hour-10)
	{
		if((hour<=7)||(hour>=18))//Night Time
		{
			lcd_write_string("It's Night Time.");
			delay_ms(1000);
			lcd_clear();
			Relay_On(1);
			delay_ms(1000);
			Relay_On(2);
			delay_ms(1000);
			Relay_On(3);
			delay_ms(1000);
			Relay_On(4);
			delay_ms(1000);
			lcd_write_string("Havea Good Sleep");
			delay_ms(10000);
			lcd_clear();
		}
		else
		{
			lcd_write_string("Good Morning !!!");
			delay_ms(2000);
			lcd_clear();
			Relay_Off(1);
			delay_ms(1000);
			Relay_Off(2);
			delay_ms(1000);
			Relay_Off(3);
			delay_ms(1000);
			Relay_Off(4);
			delay_ms(1000);
			lcd_write_string("Thank Youuu!!!  ");
			delay_ms(5000);
			lcd_clear();
		}
	}

	delay_ms(1000);
}
void configure_uart(void)
{
	int pin = 0;
	int baud_rate = 115200;
	float baud_div = 168000000 / (baud_rate * 16.0);
	int integer_part = 168000000 / (baud_rate * 16);
	int fractional_part = (baud_div - integer_part) * 16;


  // PA9 is UART5 TX and PA10 is UART5 RX
	RCC->AHB1ENR |= 0x4;
	RCC->AHB1ENR |= 0x8;
	// GPIO configuration
	pin = 12;
	GPIOC ->AFR[1] &= ~(0xF << (pin-8)*4);
	GPIOC ->MODER &= ~(0x3 << pin*2);
	GPIOC ->MODER |= (0x2 << pin*2);
	GPIOC ->OTYPER &= ~(0x01 << pin);
	GPIOC ->OSPEEDR |= (0x3 << pin*2);
	GPIOC ->PUPDR &= ~(0x3 << pin*2);
	GPIOC ->PUPDR |= (0x1 << pin*2);
	pin = 2;
	GPIOD ->AFR[1] &= ~(0xF << (pin-8)*4);
	GPIOD ->AFR[1] |= (0x7 << (pin-8)*4);
	GPIOD ->MODER &= ~(0x3 << pin*2);
	GPIOD ->MODER |= (0x2 << pin*2);
	GPIOD ->OTYPER &= ~(0x01 << pin);
	GPIOD ->OSPEEDR |= (0x3 << pin*2);
	GPIOD ->PUPDR &= ~(0x3 << pin*2);
	GPIOD ->PUPDR |= (0x1 << pin*2);

	// Enable USART1 clock
	RCC ->APB1ENR |= 0x100000;
	// USART Register configuration
	UART5->BRR = (integer_part << 4) | (fractional_part & 0xF);
	UART5->CR1 = 0x200C;
	UART5->CR2 = 0x2000;
	UART5->CR3 = 0x0;
}


void send_char(unsigned char c)
{
	while((UART5->SR & 0x80) == 0);// wait till TX ready
	UART5->DR = c;
}

unsigned char recv_char_blocking(void)
{
	while((UART5->SR & 0x20) == 0);// wait till TX ready
	return UART5->DR;
}

unsigned char recv_char(void)
{
	if ((UART5->SR & 0x20) == 0)
		return 0;
	else
		return UART5->DR;
}
void print_str(char *str)
{
	while(*str != 0)
	{
		send_char(*str);
		str++;
	}
}
void print_num(uint32_t n)
{
	int i;
	uint8_t num[16];
	uint8_t count=0;
	if(n==0)
	{
		UART5->DR='0';
		return;
	}
	while (n>0)
	{
		num[count] = ((n%10)+ 48);
		n/=10;
		count++;
	}
	for (i=count;i>=0;i--)
	{
		while((UART5->SR &0x20)!=0);
		UART5->DR=num[i];
	}
}


//App
void app(void)
{
	/*if(recv_char()=='1')
		Relay_On(1);
	if(recv_char()=='2')
		Relay_Off(1);
	if(recv_char()=='3')
		Relay_On(2);
	if(recv_char()=='4')
		Relay_Off(2);
	if(recv_char()=='5')
		Relay_On(3);
	if(recv_char()=='6')
		Relay_Off(3);
	if(recv_char()=='7')
		Relay_On(4);
	if(recv_char()=='8')
		Relay_Off(4);*/
	
	switch(recv_char())
	{
		case (0x31):
			Relay_On(1);
			break;
		case (0x32):
			Relay_Off(1);
			break;
		case (0x33):
			Relay_On(2);
			break;
		case (0x34):
			Relay_Off(2);
			break;
		case (0x35):
			Relay_On(3);
			break;
		case (0x36):
			Relay_Off(3);
			break;
		case (0x37):
			Relay_On(4);
			break;
		case (0x38):
			Relay_Off(4);
			break;
	}
}

//Bluetooth Module
void Hc05_init(void)
{
	int pin;
	int baud_rate = 9600;
	float baud_div = 168000000 / (baud_rate * 16.0);
	int integer_part = 168000000 / (baud_rate * 16);
	int fractional_part = (baud_div - integer_part) * 16;

	RCC->APB1ENR|=0x80000;//UART 4 Enable
	RCC->AHB1ENR|=0x04;//Port C Enable

	
	// GPIO configuration
	pin = 10;//TX
	GPIOC ->AFR[1] &= ~(0xF << (pin-8)*4);
	GPIOC ->AFR[1] |= (0x8 << (pin-8)*4);
	GPIOC ->MODER &= ~(0x3 << pin*2);
	GPIOC ->MODER |= (0x2 << pin*2);
	GPIOC ->OTYPER &= ~(0x01 << pin);
	GPIOC ->OSPEEDR |= (0x3 << pin*2);
	GPIOC ->PUPDR &= ~(0x3 << pin*2);
	GPIOC ->PUPDR |= (0x1 << pin*2);
	pin = 11;//RX
	GPIOC ->AFR[0] &= ~(0xF << (pin)*4);
	GPIOC ->AFR[0] |= (0x8 << (pin)*4);
	GPIOC ->MODER &= ~(0x3 << pin*2);
	GPIOC ->MODER |= (0x2 << pin*2);
	GPIOC ->OTYPER &= ~(0x01 << pin);
	GPIOC ->OSPEEDR |= (0x3 << pin*2);
	GPIOC ->PUPDR &= ~(0x3 << pin*2);
	GPIOC ->PUPDR |= (0x1 << pin*2);

	// USART Register configuration
	UART4->BRR = (integer_part << 4) | (fractional_part & 0xF);
	UART4->CR1 = 0x200C;
	UART4->CR2 = 0x0000;
	UART4->CR3 = 0x0;

}
void Hc05_send_char(unsigned char c)
{
	while((UART4->SR & 0x80) == 0);// wait till TX ready
	UART4 ->DR = c;
}

unsigned char Hc05_recv_char_blocking(void)
{
	while((UART4->SR & 0x20) == 0);// wait till TX ready
	return UART4 ->DR;
}

unsigned char Hc05_recv_char(void)
{
	if ((UART4->SR & 0x20) == 0)
		return 0;
	else
		return UART4 ->DR;
}
void Hc05_print_str(char *str)
{
	while(*str != 0)
	{
		Hc05_send_char (*str);
		str++;
	}
}
void Hc05_print_num(uint32_t n)
{
	int i;
	uint8_t num[16];
	uint8_t count=0;
	if(n==0)
	{
		UART4->DR='0';
		return;
	}
	while (n>0)
	{
		num[count] = ((n%10)+ 48);
		n/=10;
		count++;
	}
	for (i=count;i>=0;i--)
	{
		while((UART4->SR &0x20)!=0);
		UART4->DR=num[i];
	}
}
void voice(void)
{
	char choice;
	choice = Hc05_recv_char();
	if(choice==0x77)
	{
		if((GPIOC->ODR&=0x10)==0x10)
			Relay_On(1);
		else
			Relay_Off(1);
	}
	else if (choice==0x62)
	{
		if((GPIOC->ODR&=0x20)==0x20)
			Relay_On(2);
		else
			Relay_Off(2);
	}
	else if (choice==0x72)
	{
		if((GPIOC->ODR&=0x40)==0x40)
			Relay_On(3);
		else
			Relay_Off(3);
	}
	else if (choice==0x67)
	{
		if((GPIOC->ODR&=0x80)==0x80)
			Relay_On(4);
		else
			Relay_Off(4);
	}
}


int main(void)
{
	int i;
	configure();
	configure_uart();
	configure_LCD();
	lcd_init();
	lcd_clear();
	delay_ms(1000);

	
	Intro();
	delay_ms(1000);
	lcd_clear();
	
	//AUTOMATIC MODE
	lcd_write_string("Select Mode:-   ");
	delay_ms(4000);
	lcd_write_command(0xC0);
	lcd_write_string("a-->: Automatic ");
	delay_ms(4000);
	lcd_clear();
	lcd_write_string("m--> Manual  and");
	delay_ms(4000);
	lcd_write_command(0xC0);
	lcd_write_string("v--> Voice      ");
	delay_ms(4000);
	lcd_clear();
	
	delay_ms(5000);
	lcd_write_string("Automatic Mode  ");
	delay_ms(1000);
	lcd_write_command(0xC0);
	lcd_write_string("Activated !!!   ");
	delay_ms(5000);
	lcd_clear();
	Relay_Off(1);
	lcd_clear();
	Relay_Off(2);
	lcd_clear();
	Relay_Off(3);
	lcd_clear();
	Relay_Off(4);
	lcd_clear();
	LCD_OUT();
	lcd_clear();
			lcd_write_string("Voice Mode      ");
			delay_ms(1000);
			lcd_write_command(0xC0);
			lcd_write_string("Activated !!!   ");
			delay_ms(1000);
			Hc05_init();
			lcd_clear();
			/*while(1)
			{
				voice();
				Relay_Status(0x01);
				Relay_Status(0x02);
				Relay_Status(0x04);
				Relay_Status(0x08);
			}*/
	while(1)
	{
		mode[0]=recv_char();

		if(mode[0]=='a')
		{
			lcd_write_string("Automatic Mode  ");
			delay_ms(1000);
			lcd_write_command(0xC0);
			lcd_write_string("Activated !!!   ");
			delay_ms(5000);
			lcd_clear();
			LCD_OUT();
		}
		else if (mode[0]=='m')
		{
			lcd_clear();
			lcd_write_string("Manual Mode     ");
			delay_ms(1000);
			lcd_write_command(0xC0);
			lcd_write_string("Activated !!!   ");
			delay_ms(1000);
			while(1)
			{
				app();
				Relay_Status(0x01);
				Relay_Status(0x02);
				Relay_Status(0x04);
				Relay_Status(0x08);
			}
		}
		else if (mode[0]=='v')
		{
			lcd_clear();
			lcd_write_string("Voice Mode      ");
			delay_ms(1000);
			lcd_write_command(0xC0);
			lcd_write_string("Activated !!!   ");
			delay_ms(1000);
			Hc05_init();
			lcd_clear();
			while(1)
			{
				voice();
				Relay_Status(0x01);
				Relay_Status(0x02);
				Relay_Status(0x04);
				Relay_Status(0x08);
			}
		}
	}
	return 0;
}
